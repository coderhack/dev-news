
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coder hacks</title>
    <link>http://coderhack.com/index.xml</link>
    <description>Recent content on Coder hacks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Apr 2017 18:29:59 +0530</lastBuildDate>
    <atom:link href="http://coderhack.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ESP 8266 based water controller</title>
      <link>http://coderhack.com/note/test/</link>
      <pubDate>Sat, 22 Apr 2017 18:29:59 +0530</pubDate>
      
      <guid>http://coderhack.com/note/test/</guid>
      <description>

&lt;h2 id=&#34;home-automation-series-part-1&#34;&gt;Home automation series part 1&lt;/h2&gt;

&lt;p&gt;As summers are nearing, wanted to go on vacation, now that I have couple of plants that need to be
watered when I am on the move.. thought its a good usecase to be automated.&lt;/p&gt;

&lt;p&gt;One option is to have timer which can switch on a valve once in a day, however due to power interruption
   It might loose track unless I build a battery backup for the controller. Other option is to use Realtime
   clock module to refer and water the plants at specific timing.&lt;/p&gt;

&lt;p&gt;Mean time I was checking on node red and IOT and why not build node red hub on Raspberry pi and have
   controller triggered by node red pipeline. Because its cool (unlike boring clock based implementation)
   I picked this up with wifi module that I already had (ESP 8266).&lt;/p&gt;

&lt;p&gt;First I tried to use node mcu module based on ch340 ttl chip, however it seems getting this serial driver
   working on Mac or windows is a challenge. So I ordered a separate serial
   &lt;a href=&#34;http://www.amazon.in/REES52-FT232RL-Download-Adapter-Arduino/dp/B00M1K412U/ref=sr_1_2?ie=UTF8&amp;amp;qid=1494090823&amp;amp;sr=8-2&amp;amp;keywords=ttl&#34;&gt;ttl module&lt;/a&gt;
   this module works without any additional drivers on mac or windows.&lt;/p&gt;

&lt;p&gt;However node-mcu has many digital pins, given that I have both ESP01 (which has no additional digital
   output) thought why not use it for this project. After briefly checking on internet got the following tasks&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; compile node-mcu firmare&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Using ttl chip program ESP01&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Prepare raspberry image with ssh&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Install node-red on raspberry and try out simple flow&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Read about mqtt and figure out a server to run on raspberry

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Mosquitto seems to be good install service and configure service scripts to start on reboot&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Test simple mqtt message and node-red flow&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Build the solenoid valve controller board&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Write and upload program to listen to mqtt topic and switch on the valve
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to be continued &amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker getting started</title>
      <link>http://coderhack.com/note/docker-getting-started/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://coderhack.com/note/docker-getting-started/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Docker experiment to build hello world image from scratch. Instead of using shell script, C based
application is used to make it comparable to custom application package/distribution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;creating-minimal-docker-image&#34;&gt;Creating minimal docker image&lt;/h2&gt;

&lt;p&gt;what you need :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;docker installed on linux variant (tested on Ubuntu 14LTS)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gcc for making minimal application&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;docker can import archives such as tar, tar.gz, .bzip etc. you can package all
necessary files into an archive and import it into docker.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar cv --files-from /dev/null | sudo docker import - empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create empty image in docker repository.&lt;/p&gt;

&lt;p&gt;Now lets create Helloworld application to package it to docker.&lt;/p&gt;

&lt;p&gt;file: a.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;

void main() {

  printf(&amp;quot;Hello from docker!!\n&amp;quot;);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can compile with static linking to avoid shared library dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -static a.c -o a`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify that there are not dependencies with ldd&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ldd &amp;quot;a&amp;quot;
&amp;gt;     not a dynamic executable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a Dockerfile with below entries (configuration for docker container that
we are about to build).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM empty
ADD ./a /a
CMD [&amp;quot;/a&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It says docker that seed the image from empty image that we have created and add
file a&lt;/p&gt;

&lt;p&gt;to it as target path /a and startup command is to execute /a&lt;/p&gt;

&lt;p&gt;Now build the image with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker build -t &amp;quot;first_image&amp;quot; ./
Sending build context to Docker daemon 880.6 kB
Sending build context to Docker daemon
Step 0 : FROM empty
 ---&amp;gt; 62f67e5fbc6a
Step 1 : ADD ./a /a
 ---&amp;gt; 1236c4ce0129
Step 2 : CMD [&amp;quot;/a&amp;quot;]
 ---&amp;gt; f6982bf61e13
Successfully built f6982bf61e13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can list images with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo docker images
REPOSITORY   TAG    IMAGE ID     CREATED           VIRTUAL SIZE
first_image  latest 9ba228119b81 54 seconds ago      877.4 kB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To Run the docker instance in background mode :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker run first_image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see output like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello from docker
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Recommended to checkout &lt;a href=&#34;https://github.com/docker/docker.git&#34;&gt;https://github.com/docker/docker.git&lt;/a&gt; and browse the source in your
favorite ide&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Nitro: A quick and simple profiler for Go</title>
      <link>http://coderhack.com/note/nitro/</link>
      <pubDate>Mon, 21 Jan 2013 11:27:27 -0400</pubDate>
      
      <guid>http://coderhack.com/note/nitro/</guid>
      <description>

&lt;h1 id=&#34;nitro&#34;&gt;Nitro&lt;/h1&gt;

&lt;p&gt;Quick and easy performance analyzer library for &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Nitro is a quick and easy performance analyzer library for Go.
It is useful for comparing A/B against different drafts of functions
or different functions.&lt;/p&gt;

&lt;h2 id=&#34;implementing-nitro&#34;&gt;Implementing Nitro&lt;/h2&gt;

&lt;p&gt;Using Nitro is simple. First, use &lt;code&gt;go get&lt;/code&gt; to install the latest version
of the library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/spf13/nitro
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, include nitro in your application.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
